name: Continuous integration

permissions:
  contents: read

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  
env:
  CARGO_TERM_COLOR: always

jobs:
  lints:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: "clippy, rustfmt"

      # make sure all code has been formatted with rustfmt
      - name: check rustfmt
        run: cargo fmt --all -- --check --color always

      # run clippy to verify we have no warnings
      - run: cargo fetch
      - name: Run rust-clippy
        run:
          cargo clippy
          --all-features
          --message-format=json | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt
        continue-on-error: true

      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: rust-clippy-results.sarif
          wait-for-processing: true
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo check --all-targets --profile=test
  run:
    strategy:
      matrix:
        include:
          - target: aarch64-apple-darwin
            runner_os: macos-latest
            # Runner (x86-64) and target are not compatible.
            run_tests: false
          - target: x86_64-pc-windows-msvc
            runner_os: windows-latest
            run_tests: true
          - target: x86_64-unknown-linux-musl
            runner_os: ubuntu-latest
            run_tests: true

    runs-on: ${{ matrix.runner_os }}

    steps:
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Cargo.lock
        run: cargo generate-lockfile

      - name: Cache Rust toolchain and build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          # The cache should not be shared between different workflows and jobs.
          # Two jobs might share the same default target but have different build targets.
          shared-key: ${{ github.workflow }}-${{ github.job }}-${{ matrix.target }}

      - name: Build tests with all features enabled
        run: >-
          cargo test --workspace --locked --target ${{ matrix.target }} --all-features --all-targets
          --no-run
      - name: Run tests with all features enabled
        if: matrix.run_tests
        run: >-
          cargo test --workspace --locked --target ${{ matrix.target }} --all-features --all-targets
          -- --nocapture --quiet
      - name: Build workspace documentation with all features enabled
        run: cargo doc --workspace --locked --target ${{ matrix.target }} --all-features

      - name: Build release with default features
        run: cargo build --locked --target ${{ matrix.target }} --all-targets --profile release

